<?php
/**
 * @file
 */

include_once 'newspaper_solr.features.inc';

/**
 * Implements hook_apachesolr_query_prepare().
 */
function newspaper_solr_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
  // Alter available sorts.
  $sorts = $query->getAvailableSorts();
  $sorts = array(
    'score' => array('title' => t('Relevance')) + $sorts['score'],
    'ds_created' => $sorts['ds_created'],
  );
  $query->setAvailableSorts($sorts);

  $gap = $query->getParam('f.ds_created.facet.date.gap');
  if ($gap[0] == '+1' . FACETAPI_DATE_YEAR) {
    $query->removeParam('f.ds_created.facet.date.gap');
    $query->addParam('f.ds_created.facet.date.gap', '+1' . FACETAPI_DATE_MONTH);
  }
}

/**
 * Implements hook_theme().
 */
function newspaper_solr_theme($existing, $type, $theme, $path) {
  return array(
    'newspaper_solr_issue_grid' => array(
      'variables' => array(),
      'template' => 'newspaper-solr-issue-grid',
    ),
  );
}

/**
 * Implements hook_facetapi_facet_info_alter().
 */
function newspaper_solr_facetapi_facet_info_alter(&$facets) {
  // Alter created facet to always show months.
  if (isset($facets['created'])) {
    $facets['created']['map callback'] = 'newspaper_solr_created_facet_map';
  }

  // Alter custom author label
  if (isset($facets['customauthor'])) {
    $facets['customauthor']['label'] = 'Author';
  }

}

/**
 * Map callback for created date facet.
 *
 * Always show months for created facet, instead of the default of showing just
 * years first then months.
 */
function newspaper_solr_created_facet_map($values, $options) {
  if (empty($options['format callback'])) {
    $options['format callback'] = 'facetapi_format_timestamp';
  }
  $map = array();
  foreach ($values as $value) {
    $range = explode(' TO ', trim($value, '{[]}'));
    if (isset($range[1])) {
      $map[$value] = facetapi_format_date($range[0], FACETAPI_DATE_MONTH, $options['format callback']);
    }
  }
  return $map;
}

/**
 * Implements hook_apachesolr_search_page_alter().
 */
function newspaper_solr_apachesolr_search_page_alter(&$build, $search_page) {
  // Add issue grid to empty search pages.
  if (empty($build['search_results']['#results']) && !isset($build['search_results']['#markup'])) {
    drupal_set_title('Archive');

    // Add a header to search area.
    $build = array(
      'title' => array(
        '#markup' => '<h2>' . t('Search by Keyword') . '</h2>',
      ),
    ) + $build;

    // List relevant facets and force display as links.
    module_load_include('inc', 'facetapi', 'facetapi.block');
    $query = apachesolr_current_query('solr');
    $searcher = $query->getSearcher();
    $elements = facetapi_build_realm($searcher, 'block');

    $transform_select = function ($items) {
      $list_items = array();
      foreach ($items as $key => $item) {
        if ($key) {
          $list_items[] = '<a class="facetapi-inactive" rel="nofollow" href="' . $key . '">' . $item . '</a>';
        }
      }

      return $list_items;
    };

    $facets['author'] = array(
      '#prefix' => '<div class="col-xs-12 col-sm-4 col-md-4 col-lg-4"><h4>' . t('Author') . '</h4>',
      '#suffix' => '</div>',
      'author' => $elements['customauthor']['sm_custom_author_name'],
    );
    $facets['issue'] = array(
      '#prefix' => '<div class="col-xs-12 col-sm-4 col-md-4 col-lg-4"><h4>' . t('Issue') . '</h4>',
      '#suffix' => '</div>',
      'issue' => array(
        '#theme' => 'item_list',
        '#items' => $transform_select($elements['im_field_issue']['im_field_issue']['facets']['#options']),
        '#attributes' => array(
          'class' => array('facetapi-facetapi-links', 'facetapi-facet-issue'),
          'id' => 'facetapi-facet-apachesolrsolr-block-im-field-issue',
        ),
      ),
    );
    $facets['section'] = array(
      '#prefix' => '<div class="col-xs-12 col-sm-4 col-md-4 col-lg-4"><h4>' . t('Section') . '</h4>',
      '#suffix' => '</div>',
      'section' => array(
        '#theme' => 'item_list',
        '#items' => $transform_select($elements['im_field_section']['im_field_section']['facets']['#options']),
        '#attributes' => array(
          'class' => array('facetapi-facetapi-links', 'facetapi-facet-section'),
          'id' => 'facetapi-facet-apachesolrsolr-block-im-field-section',
        ),
      ),
    );

    // Replace facets with custom built ones.
    $build['search_results'] = array(
      '#theme_wrappers' => array('apachesolr_search_browse_blocks'),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'facetapi') . '/facetapi.js',
        ),
      ),
    ) + $facets;

    // Two columns, issue grid and search form.
    $build = array(
      '#prefix' => '<div class="row" id="issue-archive">',
      '#suffix' => '</div>',
      'issues' => array(
        '#prefix' => '<div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 issue-grid">',
        '#suffix' => '</div>',
        '#theme' => 'newspaper_solr_issue_grid',
      ),
      'search' => $build + array(
        '#prefix' => '<div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 search">',
        '#suffix' => '</div>',
      ),
    );
  }
}

/**
 * Implements hook_preprocess_newspaper_solr_issue_grid().
 */
function newspaper_solr_preprocess_newspaper_solr_issue_grid(&$variables) {
  // Load up all issues with a pager.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', 'issue')
    ->propertyOrderBy('weight')
    ->addTag('newspaper_issue_grid')
    ->pager(12)
    ->execute();

  if (!empty($result['taxonomy_term'])) {
    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
    foreach ($terms as $term) {
      $variables['issues'][] = array(
        '#theme' => 'newspaper_base_issue_cover',
        '#term' => $term,
      );
    }

    $variables['pager'] = array(
      '#theme' => 'pager',
    );
  }
}


/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 */
function newspaper_solr_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  if ($entity->type == 'article') {

    switch ($entity->customauthor['mode']) {
      // If viewing multiple authors, use a more complex theme.
      case CUSTOMAUTHOR_OTHER_USER:
          $authors = field_get_items('node', $entity, 'field_authors');

          if ($authors) {
            foreach($authors as $author) {
              $user = user_load($author['target_id']);
              $all_authors[] = ($user->field_user_name) ? $user->field_user_name[LANUGUAGE_NONE][0]['value'] : $user->name;
            }
          }
        break;
      case CUSTOMAUTHOR_OTHER:
      case CUSTOMAUTHOR_NONE:
        $all_authors[] = $entity->customauthor['other'];
        break;
      case CUSTOMAUTHOR_NODE_USER:
        $user = user_load($entity->uid);
        if ($user->name == 'wpuser_contributor') {
          $all_authors[] = 'Street Roots';
        } else {
          $all_authors[] = ($user->field_user_name) ? $user->field_user_name[LANUGUAGE_NONE][0]['value'] : $user->name;
        }
        break;
    }

    if ($all_authors[0] != '') {
      $document->setField('sm_custom_author_name', $all_authors);
    }

  }
}

/**
 * Implements hook_facetapi_facet_info().
 */
function newspaper_solr_facetapi_facet_info($searcher_info) {
  $facets['customauthor'] = array(
    'name' => 'customauthor',
    'label' => t('Custom Author'),
    'description' => t('Provided by custom author'),
    'field' => 'sm_custom_author_name',
  );
  return $facets;
}
